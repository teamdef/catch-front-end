import { useState, useEffect } from 'react';
import { QuizCard, SkeletonQuizCard, NotFound } from 'components/common';
import styled from 'styled-components';
import { RecentQuizListApi } from 'pages/api/quiz';
import { MdKeyboardArrowDown } from 'react-icons/md';

const RecentQuizList = () => {
  const [recentQuizList, setRecentQuizList] = useState<RecentQuizType[] | null>(null);
  const [paginationKey, setPaginationKey] = useState<any | null>(null);
  
  const [end, setEnd] = useState(false); //Î™®Îì† Í∏Ä Î°úÎìú ÌôïÏù∏
  const [load, setLoad] = useState(false); //Î°úÎî© Ï§ë ÌôïÏù∏

  const fetchRecentQuizList = async () => {
    setLoad(true);
    try {
      const res = await RecentQuizListApi(paginationKey);
      const { pagination_key, recent_quizset } = res.data;
      parseRecentQuizList(recent_quizset);
      setPaginationKey(pagination_key);
      setLoad(false);
    } catch (err) {
      console.log(err);
    }
  };

  const parseRecentQuizList = (data: any) => {
    const _recentQuizList = data.map((quizSet: any) => {
      const _quizObj: RecentQuizType = {
        id: quizSet.id,
        createdAt: quizSet.created_at,
        setTitle: quizSet.set_title,
        solverCnt: quizSet.solver_cnt,
        thumbnail: quizSet.thumbnail ?? null,
        user: { nickname: quizSet.user.nickname, profileImg: quizSet.user.profile_img },
      };
      return _quizObj;
    });
    attachQuizList(_recentQuizList);
  };

  /* pagination_keyÎ•º ÏùëÎãµÍ∞íÏúºÎ°ú Î∞õÏúºÎ©¥ Ï∂îÍ∞ÄÎ°ú Îç∞Ïù¥ÌÑ∞Î•º Îçî Ï°∞ÌöåÌï† Ïàò ÏûàÎã§. */
  const attachQuizList = (quizList: RecentQuizType[]) => {
    /* Í∏∞Ï°¥Ïóê Î°úÎìúÌïú ÌÄ¥Ï¶à Î™©Î°ùÏù¥ ÏûàÏùÑ Í≤ΩÏö∞ */
    if (recentQuizList) {
      if (recentQuizList.length === 0) setEnd(true); /* ÏµúÏ¥à Î°úÎìúÎ•º ÌïòÏòÄÏúºÎÇò ÏùëÎãµÍ∞íÏù¥ ÏóÜÏùå */
      setRecentQuizList([...recentQuizList, ...quizList]);
    } else {
      setRecentQuizList([...quizList]);
    }
  };

  /* Ï≤òÏùåÏóêÎäî pagination_keyÍ∞Ä nullÎ°ú ÏÑ§Ï†ïÎêòÏñ¥ÏûàÎã§. ÎçîÎ≥¥Í∏∞Î•º ÌÅ¥Î¶≠ÌïòÎ©¥ Ï†ÄÏû•Îêú pagination_keyÎ°ú Ï∂îÍ∞Ä Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò®Îã§.*/
  useEffect(() => {
    if (recentQuizList && !paginationKey) setEnd(true);
  }, [paginationKey]);

  useEffect(() => {
    fetchRecentQuizList();
  }, []);

  /* Ïª¥Ìè¨ÎÑåÌä∏ Íµ¨Ï°∞ Í∞úÏÑ†ÌïòÍ∏∞ */
  return (
    <Wrapper>
      <ListWrapper>
        <PaddingBottom>
          {recentQuizList ? (
            recentQuizList.length === 0 ? (
              <NotFound title={'Îì±Î°ùÎêú ÌÄ¥Ï¶à ÏÑ∏Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§ üò£'} subTitle={'ÌÄ¥Ï¶à ÏÑ∏Ìä∏Î•º ÎßåÎì§Ïñ¥Î≥ºÍπåÏöî?'} />
            ) : (
              <>
                {recentQuizList.map((quiz) => {
                  return <QuizCard key={quiz.id} recentQuiz={quiz} />;
                })}
                {load && (
                  <>
                    <SkeletonQuizCard isthumb={false} />
                    <SkeletonQuizCard isthumb={false} />
                    <SkeletonQuizCard isthumb={false} />
                  </>
                )}
                {!end && (
                  <QuizLoad onClick={fetchRecentQuizList}>
                    <MdKeyboardArrowDown size={20} />
                    ÎçîÎ≥¥Í∏∞
                  </QuizLoad>
                )}
              </>
            )
          ) : (
            <>
              <SkeletonQuizCard isthumb={false} />
              <SkeletonQuizCard isthumb={false} />
              <SkeletonQuizCard isthumb={false} />
            </>
          )}
        </PaddingBottom>
      </ListWrapper>
    </Wrapper>
  );
};

const Wrapper = styled.div`
  width: 100%;
  margin: 0 auto;
`;

const QuizLoad = styled.button`
  border: none;
  display: flex;
  align-items: center;
  background-color: transparent;
  font-size: 14px;
  font-weight: bold;
  color: #595959;
  padding-bottom: 40px;
  padding-top: 1rem;
  &:hover {
    cursor: pointer;
  }
`;
const ListWrapper = styled.div`
  display: flex;
  align-items: center;
  flex-direction: column;
  margin-top: 1.5rem;
`;

const PaddingBottom = styled.div`
  padding-bottom: 80px;
  width: 100%;
`;
export default RecentQuizList;
